创建型设计模式

工厂模式(factory):
    工厂方法: 又称多态性工厂模式
        其用意是定义一个创建产品对象的工厂接口将实现创建的工作推迟到子类中
        为一类产品,根据不同的工厂类创建不同这种类型的具体产品。
    抽象工厂:为一系列产品，它是一个产足， 根据不同的工厂类创建出一族的不同产品

单例模式(singleton):确保某一个类只有一个实例，并且自己实例化供系统调用实例
建造模式(builder):
    将一个产品的内部表现与产品的生成过程分割开，从而根据构建过程不同，生成出不同产品
原型模式(clone):
    通过给出一个原型对象来指明要创建的对象的类型，然后用复制这个原型对象的办法创建出更多同类型的对象
    简单说就是克隆给定的对象类型及对象中所有属性信息。
用途:需要用到一个对象，但又不想对该对象中的数据做任何改变



结构型设计模式:
描述如何将类或者对象结合在一起形成更大的结构。
结构模式描述两种不同的东西：
类的结构模式:
     使用继承把类、接口等组合在一起，形成更大的结构。
        例如：当一个类从父类继承并实现了接口是，这个新的类就把父类和接口结合在一起了
     类的结构模式是静态的，典型案例是 适配器模式

对象的结构模式：
    典型的模式：代理模式


适配器模式:(adapter)

     描述的是，把一个类的接口编程客户端所期待的另外一中接口，从而是原本因接口不匹配而无法在一起工作，变成可以一起工作




缺省适配模式:

合成模式：

装饰模式：

代理模式：

享元模式：

门面模式：
    1.子系统 角色
    2. 外观角色 ---聚合所有子系统接口
    3. 客户端

    订单：
            在订单服务中OrderService 聚合的信息 ---获取购物车信息、获取商品信息、获取价格信息、获取优惠信息

            客户端无需
        商品中心，购物车中心，优惠中心，价格中心。



桥接模式：








行为型设计模式：
策略模式：定义了算法族，分别封装起来，让它们之间可相互替换，此模式让算法的变化独立于使用算法的客户





